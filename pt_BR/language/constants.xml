<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 337760 Maintainer: fabioluciano Status: ready --><!-- CREDITS: ae, thiago, __lcobucci, fabioluciano -->
 <chapter xml:id="language.constants" xmlns="http://docbook.org/ns/docbook">
  <title>Constantes</title>

  <simpara>
   Uma constante é um identificador (nome) para um valor único. Como o nome
   sugere, esse valor não pode mudar durante a execução do
   script (exceto as <link linkend="language.constants.predefined">
   constantes mágicas</link>, que não são constantes de verdade).
   As constantes são case-sensitive por padrão. Por convenção,
   identificadores de constantes são sempre em maiúsculas.
  </simpara>
  <para>
   O nome de uma constante tem as mesmas regras de qualquer rótulo do PHP. Um
   nome válido de constante começa com uma letra ou sublinhado, seguido
   por qualquer número de letras, números ou sublinhados. Como uma expressão
   regular, pode ser representada por:
   <literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>
  </para>
  &tip.userlandnaming;
  <para>
   <example>
    <title>Nomes de constantes válidos e inválidos</title>
    <programlisting role="php">
<![CDATA[
<?php

// Nomes de constantes válidos
define("FOO",     "alguma coisa");
define("FOO2",    "alguma outra coisa");
define("FOO_BAR", "alguma coisa mais");

// Nomes de constantes inválidas
define("2FOO",    "alguma coisa");

// Isto é válido, mas deve ser evitado:
// O PHP pode vir a fornercer uma constante mágica
// que danificará seu script
define("__FOO__", "alguma coisa");

?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <simpara>
    Para nossos exemplos, uma letra é a-z, A-Z e os caracteres ASCII
    do 127 ao 255 (0x7f-0xff).
   </simpara>
  </note>

  <simpara>
   Como as &link.superglobals;, o escopo de uma constante é global. Você
   pode acessar constantes de qualquer lugar em seu script sem se preocupar
   com o escopo. Para mais informações sobre o escopo no PHP, leia a seção
   do manual <link linkend="language.variables.scope">escopo de variáveis</link>.
  </simpara>

  <sect1 xml:id="language.constants.syntax">
   <title>Sintaxe</title>
   <simpara>
    Você pode definir uma constante utilizando a função
    <function>define</function>, ou a palavra-chave
    <literal>const</literal> fora da definição de uma classe a partir do
    PHP 5.3.0. Uma vez definida, a constante não poderá ser modificada ou
    anulada.
   </simpara>
   <simpara>
    Até o PHP 5.6, somente dados escalares (<type>boolean</type>, <type>integer</type>,
    <type>float</type> e <type>string</type>) podem ser colocados
    em constantes. A partir do PHP 5.6, é possível também utilizar
    qualquer expressão escalar como constantes e também
    <type>array</type> constante. É permitido o uso de um <type>resource</type>
    (recurso) como valor de constante, mas deve ser evitado, já que pode causar
    resultados inesperados.
   </simpara>
   <simpara>
    Pode-se obter o valor de uma constante simplesmente especificando seu nome.
    Diferentemente de variáveis, você <emphasis>não</emphasis> prefixará uma
    constante com um sinal de <literal>$</literal>.
    Também pode-se utilizar a função <function>constant</function> para
    ler o valor de uma constante, se você precisar obter seu valor
    dinamicamente.
    Utilize <function>get_defined_constants</function> para obter a lista de
    todas as constantes definidas.
   </simpara>
   <note>
    <simpara>
     As constantes e variáveis (globais) estão em espaços de nomes diferentes.
     Isto implica, por exemplo, que &true; e
     <varname>$TRUE</varname> sejam geralmente diferentes.
    </simpara>
   </note>
   <simpara>
    Ao usar-se uma constante indefinida, o PHP assumirá o nome
    da constante como seu próprio valor, como se tivesse a chamando com uma
    <type>string</type> (CONSTANT vs "CONSTANT"). Um erro de nível
    <link linkend="ref.errorfunc">E_NOTICE</link> será emitido
    quando isso acontecer. Veja também a referência do manual sobre como
    <link linkend="language.types.array.foo-bar">$foo[bar]</link> é
    errado (a não ser que primeiro <function>define</function>
    <literal>bar</literal> como uma constante). Isto não se aplica a <link
    linkend="language.namespaces.rules">constantes totalmente qualificas</link>,
    que lançarão um erro fatal se não estiverem definidas. Se você simplesmente quer
    checar se uma constante foi definida, utilize a função <function>defined</function>.
   </simpara>
   <para>
    Estas são as diferenças entre constantes e variáveis:
    <itemizedlist>
     <listitem>
      <simpara>
       Constantes não possuem um sinal de cifrão (<literal>$</literal>)
       antes delas;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Antes do PHP 5.3 as constantes só podem ser definidas utilizando a função
       <function>define</function>, e não por simples assimilação;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Constantes podem ser definidas e acessadas de qualquer lugar sem
       que a regras de escopo de variáveis seja aplicadas;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Constantes não podem ser redefinidas ou eliminadas depois
       de criadas; e
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Constantes só podem ter valores escalares. A partir do PHP 5.6 é possível
       definir um array constante com a instrução <literal>const</literal> e a partir do
       PHP 7 arrays constantes também podem ser definidas utilizando a <function>define</function>
       Pode-se utilizar arrays em expressões escalares constantes
       (por exemplo <literal>const FOO = array(1,2,3)[0];</literal>),
       cujo resultado final deve ser um valor de um tipo permitido.
      </simpara>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    <example>
     <title>Definindo Constantes</title>
     <programlisting role="php">
<![CDATA[
<?php
define("CONSTANT", "Hello world.");
echo CONSTANT; // imprime "Hello world."
echo Constant; // imprime "Constant" e gera um alerta notice.
?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    <example>
     <title>Definindo Constantes usando a palavra-chave <literal>const</literal></title>
     <programlisting role="php">
<![CDATA[
<?php
// Funciona a partir do PHP 5.3.0
const CONSTANT = 'Hello World';

echo CONSTANT;

// Funciona a partir do PHP 5.6.0
const ANOTHER_CONST = CONSTANT.'; Goodbye World';
echo ANOTHER_CONST;

const ANIMALS = array('dog', 'cat', 'bird');
echo ANIMALS[1]; // imprime "cat"

// A partir do PHP 7
define('ANIMALS', array(
    'dog',
    'cat',
    'bird'
));
echo ANIMALS[1]; // imprime "cat"
?>
]]>
     </programlisting>
    </example>
   </para>

   <note>
    <para>
     Ao contrário das funções definidas através de <function>define</function>,
     as constantes definidas usando a palavra-chave <literal>const</literal>
     devem ser declarados no escopo de maior nível, pois são definidas no
     tempo de compilação. Isso significa que não podem ser definidas
     dentro de funções, laços ou instruções <literal>if</literal>s ou blocos
     <literal>try</literal>/<literal>catch</literal>.
    </para>
   </note>

   <simpara>
    Veja também <link linkend="language.oop5.constants">Constantes de Classe</link>.
   </simpara>
  </sect1>

  <sect1 xml:id="language.constants.predefined">
   <title>Constantes Mágicas</title>

   <simpara>
    O PHP fornece um grande número de <link
    linkend="reserved.constants">constantes predefinidas</link> para qualquer
    script que execute. A maioria dessas constantes, entretanto, são
    criadas por várias extensões, e estarão presentes somente quando essas
    extensões estiverem disponíveis, tanto por carregamento dinâmico quanto por
    compilação direta.
   </simpara>

   <para>
    Há oito constantes mágicas, que mudam dependendo de
    onde são utilizadas. Por exemplo, o valor de
    <constant>__LINE__</constant> depende da linha em que é
    utilizada em seu script. Essas constantes especiais são
    case-insentitive:
   </para>
   <para>
    <table>
     <title>Algumas constantes "mágicas" do PHP</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Nome</entry>
        <entry>Descrição</entry>
       </row>
      </thead>
      <tbody>
       <row xml:id="constant.line">
        <entry><constant>__LINE__</constant></entry>
        <entry>
         O número da linha corrente do arquivo.
        </entry>
       </row>
       <row xml:id="constant.file">
        <entry><constant>__FILE__</constant></entry>
        <entry>
         O caminho completo e nome do arquivo com links simbólicos resolvidos. Se utilizado dentro de um include,
         o nome do arquivo incluído será retornado.
        </entry>
       </row>
       <row xml:id="constant.dir">
        <entry><constant>__DIR__</constant></entry>
        <entry>
         O diretório do arquivo. Se usado dentro de um include,
         o diretório do arquivo incluído é retornado. É equivalente
         a <literal>dirname(__FILE__)</literal>. O nome do diretório
         não possui barra no final, a não ser que seja o diretório raiz.
        </entry>
       </row>
       <row xml:id="constant.function">
        <entry><constant>__FUNCTION__</constant></entry>
        <entry>
         O nome da função.
        </entry>
       </row>
       <row xml:id="constant.class">
        <entry><constant>__CLASS__</constant></entry>
        <entry>
         O nome da classe. O nome da classe inclui
         o namespace em que foi declarado (por exemplo, <literal>Foo\Bar</literal>).
         Note que a partir do PHP 5.4, __CLASS__ também funcionará em traits.
         Quando utilizada em um método trait, __CLASS__ é o nome da classe
         que está utilizando a trait.
        </entry>
       </row>
       <row xml:id="constant.trait">
        <entry><constant>__TRAIT__</constant></entry>
        <entry>
         O nome do trait. O nome do trait inclui o namespace em
         que foi declarado (por exemplo, <literal>Foo\Bar</literal>).
        </entry>
       </row>
       <row xml:id="constant.method">
        <entry><constant>__METHOD__</constant></entry>
        <entry>
         O nome do método da classe.
        </entry>
       </row>
       <row xml:id="constant.namespace">
        <entry><constant>__NAMESPACE__</constant></entry>
        <entry>
         O nome do namespace corrente.
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    Veja também
    <function>get_class</function>,
    <function>get_object_vars</function>,
    <function>file_exists</function>&listendand;
    <function>function_exists</function>.
   </para>

   <sect2 xml:id="language.constants.predefined.changelog">
    &reftitle.changelog;

    <para>
     <informaltable>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>&Version;</entry>
         <entry>&Description;</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>5.4.0</entry>
         <entry>
          Adicionada a constante <constant>__TRAIT__</constant>
         </entry>
        </row>
        <row>
         <entry>5.3.0</entry>
         <entry>
          Adicionadas as constantes <constant>__DIR__</constant> e <constant>__NAMESPACE__</constant>
         </entry>
        </row>
        <row>
         <entry>5.0.0</entry>
         <entry>
          Adicionada a constante <constant>__METHOD__</constant>
         </entry>
        </row>
        <row>
         <entry>5.0.0</entry>
         <entry>
          Antes desta versão os valores de algumas constantes mágicas eram sempre em letras minúsculas.
          Agora todos são case-sensitive (contém os nomes da mesma maneira que foram declarados).
         </entry>
        </row>
        <row>
         <entry>4.3.0</entry>
         <entry>
          Adicionadas as constantes <constant>__FUNCTION__</constant> e <constant>__CLASS__</constant>
         </entry>
        </row>
        <row>
         <entry>4.0.2</entry>
         <entry>
          <constant>__FILE__</constant> sempre contém o caminho absoluto com os links simbólicos
          resolvidos, enquanto que em versões anteriores continham o caminho relativo em algumas
          circunstâncias
         </entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
    </para>
   </sect2>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
